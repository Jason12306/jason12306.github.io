import{_ as a,c as t,o as r,a2 as o}from"./chunks/framework.CnKoBJ9A.js";const m=JSON.parse('{"title":"动态规划","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/动态规划.md","filePath":"algorithm/动态规划.md"}'),n={name:"algorithm/动态规划.md"};function l(i,e,s,c,_,d){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="动态规划" tabindex="-1">动态规划 <a class="header-anchor" href="#动态规划" aria-label="Permalink to &quot;动态规划&quot;">​</a></h1><blockquote><p>动态规划（Dynamic Programming，DP）是运筹学的一个分支，是求解决策过程最优化的过程。20 世纪 50 年代初，美国数学家贝尔曼（R.Bellman）等人在研究多阶段决策过程的优化问题时，提出了著名的最优化原理，从而创立了动态规划。动态规划的应用极其广泛，包括工程技术、经济、工业生产、军事以及自动化控制等领域，并在背包问题、生产经营问题、资金管理问题、资源分配问题、最短路径问题和复杂系统可靠性问题等中取得了显著的效果。</p></blockquote><h2 id="基本思想" tabindex="-1">基本思想 <a class="header-anchor" href="#基本思想" aria-label="Permalink to &quot;基本思想&quot;">​</a></h2><p>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。<strong>我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。这就是动态规划法的基本思路</strong>。具体的动态规划算法多种多样，但它们具有相同的填表格式。</p><h2 id="例题" tabindex="-1">例题 <a class="header-anchor" href="#例题" aria-label="Permalink to &quot;例题&quot;">​</a></h2><ul><li><a href="https://leetcode.cn/problems/longest-increasing-subsequence/description/" target="_blank" rel="noreferrer">300. 最长递增子序列</a></li></ul>',6)]))}const p=a(n,[["render",l]]);export{m as __pageData,p as default};
