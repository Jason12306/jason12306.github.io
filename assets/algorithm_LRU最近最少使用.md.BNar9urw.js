import{_ as a,c as t,o as r,a2 as o}from"./chunks/framework.CnKoBJ9A.js";const p=JSON.parse('{"title":"LRU 最近最少使用","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/LRU最近最少使用.md","filePath":"algorithm/LRU最近最少使用.md"}'),l={name:"algorithm/LRU最近最少使用.md"};function _(n,e,s,i,c,d){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="lru-最近最少使用" tabindex="-1">LRU 最近最少使用 <a class="header-anchor" href="#lru-最近最少使用" aria-label="Permalink to &quot;LRU 最近最少使用&quot;">​</a></h1><blockquote><p>是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。该算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 t，当须淘汰一个页面时，选择现有页面中其 t 值最大的，即最近最少使用的页面予以淘汰。</p></blockquote><p>使用语言自带的、封装好的数据结构可以较为简单实现（如 js 的 Map），可一般是希望能够自己实现一个简单的<strong>双向链表</strong>。</p><h2 id="例题" tabindex="-1">例题 <a class="header-anchor" href="#例题" aria-label="Permalink to &quot;例题&quot;">​</a></h2><ul><li><a href="https://leetcode.cn/problems/lru-cache/" target="_blank" rel="noreferrer">146. LRU 缓存</a></li></ul>',5)]))}const u=a(l,[["render",_]]);export{p as __pageData,u as default};
