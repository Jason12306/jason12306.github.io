import{_ as a,c as r,o as s,a2 as o}from"./chunks/framework.CnKoBJ9A.js";const c=JSON.parse('{"title":"koa 还是 express","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Node/1.koa还是express.md","filePath":"articles/Node/1.koa还是express.md"}'),t={name:"articles/Node/1.koa还是express.md"};function p(d,e,l,i,n,h){return s(),r("div",null,e[0]||(e[0]=[o('<h1 id="koa-还是-express" tabindex="-1">koa 还是 express <a class="header-anchor" href="#koa-还是-express" aria-label="Permalink to &quot;koa 还是 express&quot;">​</a></h1><p>Koa 是 Express 的轻量级版本。它是一个中间件框架，没有像 Express 那样的额外模块（比如，没有内置路由和模板引擎）。</p><p>与 Express 不同，Koa 默认情况下不包括路由模块，你需要单独引入 koa-router 包用来定义路由。</p><h2 id="koa-与-express-主要区别" tabindex="-1">Koa 与 Express 主要区别 <a class="header-anchor" href="#koa-与-express-主要区别" aria-label="Permalink to &quot;Koa 与 Express 主要区别&quot;">​</a></h2><h3 id="中间件链接方式" tabindex="-1">中间件链接方式 <a class="header-anchor" href="#中间件链接方式" aria-label="Permalink to &quot;中间件链接方式&quot;">​</a></h3><p>Express 中间件链是基于回调的，而 Koa 的则是基于 Promise 的。这就是为什么我们在 Express 中最后定义 errorMiddleware，在 Koa 中首先定义 handleError。</p><h3 id="增强-node-vs-替换-node" tabindex="-1">增强 Node vs 替换 Node <a class="header-anchor" href="#增强-node-vs-替换-node" aria-label="Permalink to &quot;增强 Node vs 替换 Node&quot;">​</a></h3><p>Express 是 NodeJS 的一个 Web 框架。它通过为 Node 的 req 和 res 对象添加有用的方法和属性来增强其功能。 例如，Express 会向 http req 对象添加像 req.method 和 req.headers() 这样的内容，并向 http res 对象添加 res.sendFile()。 Koa 是 NodeJS 的一个中间件框架。Koa 使用自己的上下文（ctx）替换或提取 Node 的 req 和 res 对象属性。 例如，<code>context.body = result</code> 可以为请求设置响应体。</p><h3 id="更加轻量" tabindex="-1">更加轻量 <a class="header-anchor" href="#更加轻量" aria-label="Permalink to &quot;更加轻量&quot;">​</a></h3><p>Koa 比 Express 更轻量级。Koa 不像 Express 那样包含路由器或视图引擎模块。这些模块是单独存在的，可以很容易地被包含进来。在我们的示例中，你会注意到我们必须为 Koa 实例单独包含 koa-router，而 Express 中已经内置这个功能。 与 Express 不同的是，Koa 默认情况下不支持路由、模板引擎、发送文件、JSONP 等功能。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>请记住，开发 Express 和 Koa 的是同一拨开发人员。Koa 只是 Express 的一个更轻量级的版本，没有内置提供路由和模板引擎等功能。 相比于 Koa，Express 更加成熟。它的社区更为稳定，并且你可以在 Express 上找到比 Koa 更多的文档和示例。 虽然使用 Koa 可以使编写中间件更加简洁，但是使用 Express 结合 async/await 也可以避免“回调地狱”并实现类似的语法。 总之，就是 Express 和 Koa 能够实现完全一样的功能</p><ul><li><a href="https://juejin.cn/post/7234057613776076857" target="_blank" rel="noreferrer">参考资料</a></li><li><a href="https://www.stackchief.com/blog/Koa%20vs%20Express%20#" target="_blank" rel="noreferrer">资料原文</a></li></ul>',13)]))}const _=a(t,[["render",p]]);export{c as __pageData,_ as default};
