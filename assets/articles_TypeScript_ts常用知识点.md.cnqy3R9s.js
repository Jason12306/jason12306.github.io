import{_ as a,c as t,o as r,a2 as i}from"./chunks/framework.CnKoBJ9A.js";const _=JSON.parse('{"title":"ts 常用知识点","description":"","frontmatter":{},"headers":[],"relativePath":"articles/TypeScript/ts常用知识点.md","filePath":"articles/TypeScript/ts常用知识点.md"}'),o={name:"articles/TypeScript/ts常用知识点.md"};function c(l,e,p,s,n,d){return r(),t("div",null,e[0]||(e[0]=[i('<h1 id="ts-常用知识点" tabindex="-1">ts 常用知识点 <a class="header-anchor" href="#ts-常用知识点" aria-label="Permalink to &quot;ts 常用知识点&quot;">​</a></h1><p>TypeScript 中的接口定义了对象结构的契约，指定其属性和方法的名称和类型。</p><h2 id="typescript-中的-keyof-关键字" tabindex="-1">TypeScript 中的“keyof”关键字 <a class="header-anchor" href="#typescript-中的-keyof-关键字" aria-label="Permalink to &quot;TypeScript 中的“keyof”关键字&quot;">​</a></h2><p>是一个类型运算符，返回表示对象键的文字类型的联合。</p><h2 id="typescript-中的-部分-实用程序类型" tabindex="-1">TypeScript 中的“部分”实用程序类型 <a class="header-anchor" href="#typescript-中的-部分-实用程序类型" aria-label="Permalink to &quot;TypeScript 中的“部分”实用程序类型&quot;">​</a></h2><p><code>Partial</code>类型用于使现有类型的所有属性成为可选 <code>Required</code>类型用于使现有类型的所有属性成为必选</p><h2 id="interface-与-type-的相同点和区别" tabindex="-1">interface 与 type 的相同点和区别 <a class="header-anchor" href="#interface-与-type-的相同点和区别" aria-label="Permalink to &quot;interface 与 type 的相同点和区别&quot;">​</a></h2><h3 id="相同点" tabindex="-1">相同点 <a class="header-anchor" href="#相同点" aria-label="Permalink to &quot;相同点&quot;">​</a></h3><ol><li>都可以描述一个对象或者函数</li><li>允许拓展，语法不同</li></ol><h3 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h3><ul><li>type 可以声明基本类型别名，联合类型，元组等类型</li><li>interface 能够声明合并</li></ul>',11)]))}const f=a(o,[["render",c]]);export{_ as __pageData,f as default};
