import{_ as e,c as l,o as t,a2 as i}from"./chunks/framework.CnKoBJ9A.js";const u=JSON.parse('{"title":"前端首屏加载优化","description":"","frontmatter":{},"headers":[],"relativePath":"solutions/前端首屏加载优化.md","filePath":"solutions/前端首屏加载优化.md"}'),o={name:"solutions/前端首屏加载优化.md"};function r(s,a,_,n,d,c){return t(),l("div",null,a[0]||(a[0]=[i('<h1 id="前端首屏加载优化" tabindex="-1">前端首屏加载优化 <a class="header-anchor" href="#前端首屏加载优化" aria-label="Permalink to &quot;前端首屏加载优化&quot;">​</a></h1><p>目的：将页面内容尽快展示给用户，减少页面白屏时间。</p><h2 id="首屏内容加载" tabindex="-1">首屏内容加载 <a class="header-anchor" href="#首屏内容加载" aria-label="Permalink to &quot;首屏内容加载&quot;">​</a></h2><p>通常有一下方式：</p><ul><li>骨架屏进行预渲染</li><li>将页面进行分片、分屏加载，可见部分优先处理</li><li>优化加载资源的顺序与粒度，优先加载必须资源，其他资源异步处理</li><li>差异化服务，对于不同业务场景按需加载组件（如登录前后）</li><li>懒加载、预加载</li></ul><h2 id="首屏内容渲染" tabindex="-1">首屏内容渲染 <a class="header-anchor" href="#首屏内容渲染" aria-label="Permalink to &quot;首屏内容渲染&quot;">​</a></h2><ul><li>将 css 放在<code>head</code>里，可以利用浏览器的并行下载机制，提高页面加载速度，避免了浏览器渲染的重复计算</li><li>将 JavaScript 脚本放在<code>&lt;body&gt;</code>的最后面，避免资源阻塞页面渲染</li><li>减少 DOM 数量，减少浏览器渲染过程中的计算耗时</li><li>服务端渲染、预渲染</li></ul>',7)]))}const p=e(o,[["render",r]]);export{u as __pageData,p as default};
