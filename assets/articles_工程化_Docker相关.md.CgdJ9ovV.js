import{_ as a,c as i,o as n,a2 as e}from"./chunks/framework.CnKoBJ9A.js";const d=JSON.parse('{"title":"Docker 相关","description":"","frontmatter":{},"headers":[],"relativePath":"articles/工程化/Docker相关.md","filePath":"articles/工程化/Docker相关.md"}'),l={name:"articles/工程化/Docker相关.md"};function t(p,s,h,r,o,k){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="docker-相关" tabindex="-1">Docker 相关 <a class="header-anchor" href="#docker-相关" aria-label="Permalink to &quot;Docker 相关&quot;">​</a></h1><h2 id="centos-安装" tabindex="-1">centos 安装 <a class="header-anchor" href="#centos-安装" aria-label="Permalink to &quot;centos 安装&quot;">​</a></h2><p>设置 <code>yum</code> 阿里云镜像</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --add-repo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span></code></pre></div><p>设置 <code>docker</code> 仓库镜像</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://hub.atomgit.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><a href="https://docs.docker.com/engine/install/centos/#install-using-the-repository" target="_blank" rel="noreferrer">官方教程</a></li><li><a href="https://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noreferrer">菜鸟教程</a></li></ul><h2 id="docker-build-后镜像太大有-1-1-个-g" tabindex="-1"><code>docker build</code> 后镜像太大有 1.1 个 G？ <a class="header-anchor" href="#docker-build-后镜像太大有-1-1-个-g" aria-label="Permalink to &quot;\`docker build\` 后镜像太大有 1.1 个 G？&quot;">​</a></h2><blockquote><p>Docker 映像是为了创建一个运行环境，其中包含了应用程序运行所需的一切，包括但不限于 Node.js 运行时、npm 包管理和基础操作系统层。</p></blockquote><p>Dockerfile 有挺多技巧：</p><ol><li>使用 alpine 的镜像，而不是默认的 linux 镜像，可以极大减小镜像体积，比如 node:18-alpine3.14</li><li>使用多阶段构建，比如一个阶段来执行 build，一个阶段把文件复制过去，跑起服务来，最后只保留最后一个阶段的镜像。这样使镜像内只保留运行需要的文件以及 dependencies</li></ol><p><strong>部署一个小型 node.js 项目为例：</strong></p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alpine:3.18 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apk add --no-cache --update nodejs=18.20.1-r0 npm=9.6.6-r0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> APP_PATH=/usr/projects/nodejs-service \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PORT=3000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${APP_PATH}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package.json .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm i --registry=https://registry.npmmirror.com/ --production</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=install \${APP_PATH}/node_modules ./node_modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=install \${APP_PATH}/package.json .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># FROM install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dist dist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node dist/app.js --port=\${PORT}</span></span></code></pre></div><h2 id="github-的-actions-构建镜像问题" tabindex="-1">github 的 actions 构建镜像问题 <a class="header-anchor" href="#github-的-actions-构建镜像问题" aria-label="Permalink to &quot;github 的 actions 构建镜像问题&quot;">​</a></h2><p><a href="https://juejin.cn/post/6991689670027542564#heading-9" target="_blank" rel="noreferrer">github 的 actions 构建镜像问题</a></p><h2 id="导出镜像上传至服务器或自定义仓库" tabindex="-1">导出镜像上传至服务器或自定义仓库 <a class="header-anchor" href="#导出镜像上传至服务器或自定义仓库" aria-label="Permalink to &quot;导出镜像上传至服务器或自定义仓库&quot;">​</a></h2><ul><li><a href="https://cloud.tencent.com/developer/article/2161247" target="_blank" rel="noreferrer">导出镜像上传至服务器或自定义仓库</a></li></ul><h2 id="error-response-from-daemon-no-command-specified" tabindex="-1">Error response from daemon: No command specified <a class="header-anchor" href="#error-response-from-daemon-no-command-specified" aria-label="Permalink to &quot;Error response from daemon: No command specified&quot;">​</a></h2><p><a href="https://www.cnblogs.com/wish123/p/6573899.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/wish123/p/6573899.html</a></p><h2 id="github-的-actions-构建镜像问题-1" tabindex="-1">github 的 actions 构建镜像问题 <a class="header-anchor" href="#github-的-actions-构建镜像问题-1" aria-label="Permalink to &quot;github 的 actions 构建镜像问题&quot;">​</a></h2><p>先构建一个已经安装好依赖包的镜像，然后基于此镜像再次构建，相当于多阶段构建，把前两个阶段构建的镜像产物推送到镜像仓库，再以这个镜像为基础去构建后续部分。借助镜像仓库存储基础镜像从而达到缓存的效果</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以这个镜像为基础去构建，这个镜像是已经装好项目依赖的镜像并推送到镜像仓库里，这里从镜像仓库拉下来</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> project-base-image:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yarn start</span></span></code></pre></div><ol start="2"><li>自托管 actions 运行机器</li><li>docker 官方提供的 action 缓存方案</li></ol><p><a href="https://github.com/appleboy/scp-action/issues/160" target="_blank" rel="noreferrer">https://github.com/appleboy/scp-action/issues/160</a></p>`,24)]))}const g=a(l,[["render",t]]);export{d as __pageData,g as default};
