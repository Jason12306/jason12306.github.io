import{_ as e,c as t,o as r,a2 as o}from"./chunks/framework.CnKoBJ9A.js";const p=JSON.parse('{"title":"koa 洋葱模型","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Node/3.koa洋葱模型.md","filePath":"articles/Node/3.koa洋葱模型.md"}'),l={name:"articles/Node/3.koa洋葱模型.md"};function i(n,a,s,_,c,d){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="koa-洋葱模型" tabindex="-1">koa 洋葱模型 <a class="header-anchor" href="#koa-洋葱模型" aria-label="Permalink to &quot;koa 洋葱模型&quot;">​</a></h1><p>koa 的精髓就是它的中间件机制，而它使用的原理是洋葱模型。洋葱模型是由多个同心层构成，它们相互连接，朝向代表核心的领域</p><h2 id="洋葱圈模型的优点" tabindex="-1">洋葱圈模型的优点 <a class="header-anchor" href="#洋葱圈模型的优点" aria-label="Permalink to &quot;洋葱圈模型的优点&quot;">​</a></h2><ul><li>程序解耦，关注点分离。每个中间件都可以控制请求与响应，可以完成各自功能互不干扰</li><li>便于扩展，流程控制更简单。洋葱模型层层嵌套，执行流程一目了然，结构清晰，在需要的地方增加一个中间件即可</li><li>错误处理友好。每个中间件都可以捕获自己的错误并处理</li><li>方便 Debug。通过洋葱模型可以清楚看到每个中间件的进入和离开，易于调试</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><p><a href="https://juejin.cn/post/7140860497330438181#heading-2" target="_blank" rel="noreferrer">详细解析 koa 洋葱模型的设计思想</a></p></li><li><p><a href="https://www.51cto.com/article/761930.html" target="_blank" rel="noreferrer">三言两语说透 Koa 的洋葱模型</a></p></li></ul>',6)]))}const k=e(l,[["render",i]]);export{p as __pageData,k as default};
