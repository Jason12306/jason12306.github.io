import{_ as l,C as h,c as e,o as i,a2 as a,b as p,w as t,a as k,G as r,a3 as E}from"./chunks/framework.CnKoBJ9A.js";const B=JSON.parse('{"title":"XMLHttpRequest 终止请求原理","description":"","frontmatter":{},"headers":[],"relativePath":"articles/JavaScript/XMLHttpRequest终止请求原理.md","filePath":"articles/JavaScript/XMLHttpRequest终止请求原理.md"}'),d={name:"articles/JavaScript/XMLHttpRequest终止请求原理.md"};function o(g,s,c,y,F,A){const n=h("Mermaid");return i(),e("div",null,[s[1]||(s[1]=a(`<h1 id="xmlhttprequest-终止请求原理" tabindex="-1">XMLHttpRequest 终止请求原理 <a class="header-anchor" href="#xmlhttprequest-终止请求原理" aria-label="Permalink to &quot;XMLHttpRequest 终止请求原理&quot;">​</a></h1><p><code>XMLHttpRequest.abort()</code> 方法用于终止正在进行的 HTTP 请求，其底层原理涉及浏览器引擎的多层协作。以下是详细技术解析：</p><hr><h3 id="核心原理" tabindex="-1"><strong>核心原理</strong> <a class="header-anchor" href="#核心原理" aria-label="Permalink to &quot;**核心原理**&quot;">​</a></h3><ol><li><p><strong>中断网络层连接</strong></p><ul><li>浏览器内核的<strong>网络模块</strong>收到终止指令后： <ul><li>若请求仍在 TCP 握手阶段：立即关闭套接字（socket）</li><li>若已建立连接：发送 TCP <strong>RST 包</strong>（Reset）强制断开连接</li><li>若使用 HTTP/2/3：触发 <code>QUIC_RESET_STREAM</code> 或 <code>RST_STREAM</code> 帧</li></ul></li></ul></li><li><p><strong>清理请求资源</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 内部伪代码实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m_request) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    m_request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通知网络栈终止</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    m_request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nullptr;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 释放请求对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  m_responseArrayBuffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清空接收缓冲区</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  transitionState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UNSENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 状态回退</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>状态机重置</strong></p><ul><li>将 XHR 状态强制回退到 <code>UNSENT</code> (0)</li><li>清空已接收的响应头和响应体数据</li></ul></li></ol><hr><h3 id="事件触发流程" tabindex="-1"><strong>事件触发流程</strong> <a class="header-anchor" href="#事件触发流程" aria-label="Permalink to &quot;**事件触发流程**&quot;">​</a></h3>`,7)),(i(),p(E,null,{default:t(()=>[r(n,{id:"mermaid-68",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20JS%20as%20JavaScript%0A%20%20%20%20participant%20XHR%20as%20XMLHttpRequest%0A%20%20%20%20participant%20Network%20as%20%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BD%91%E7%BB%9C%E6%A0%88%0A%20%20%20%20participant%20OS%20as%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%0A%0A%20%20%20%20JS-%3E%3EXHR%3A%20xhr.abort()%0A%20%20%20%20XHR-%3E%3ENetwork%3A%20%E5%8F%91%E9%80%81%E7%BB%88%E6%AD%A2%E4%BF%A1%E5%8F%B7%0A%20%20%20%20Network-%3E%3EOS%3A%20%E5%8F%91%E9%80%81TCP%20RST%0A%20%20%20%20OS--%3E%3ENetwork%3A%20%E7%A1%AE%E8%AE%A4%E8%BF%9E%E6%8E%A5%E4%B8%AD%E6%96%AD%0A%20%20%20%20Network-%3E%3EXHR%3A%20%E8%A7%A6%E5%8F%91%E5%86%85%E9%83%A8%E7%BB%88%E6%AD%A2%E4%BA%8B%E4%BB%B6%0A%20%20%20%20XHR-%3E%3EJS%3A%20%E9%A1%BA%E5%BA%8F%E8%A7%A6%E5%8F%91%EF%BC%9A%0A%20%20%20%20%20%20%20%20Note%20over%20XHR%3A%201.%20readystatechange%20(state%3DUNSENT)%3Cbr%2F%3E2.%20abort%20%E4%BA%8B%E4%BB%B6%3Cbr%2F%3E3.%20onerror%20%E4%BA%8B%E4%BB%B6%0A"})]),fallback:t(()=>s[0]||(s[0]=[k(" Loading... ",-1)])),_:1})),s[2]||(s[2]=a(`<hr><h3 id="关键特性" tabindex="-1"><strong>关键特性</strong> <a class="header-anchor" href="#关键特性" aria-label="Permalink to &quot;**关键特性**&quot;">​</a></h3><ol><li><p><strong>同步/异步差异</strong></p><ul><li><strong>异步请求</strong>：立即终止，通过事件回调通知</li><li><strong>同步请求</strong>：阻塞的 <code>send()</code> 方法会抛出 <code>InvalidStateError</code> 异常</li></ul></li><li><p><strong>数据完整性保护</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onprogress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.lengthComputable) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`已接收: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loaded</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} bytes\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 立即停止接收数据，已加载部分被丢弃</span></span></code></pre></div></li><li><p><strong>内存管理</strong></p><ul><li>终止后响应占用的内存会被标记为可回收</li><li>底层 ArrayBuffer 引用被清除，避免内存泄漏</li></ul></li></ol><hr><h3 id="与-fetch-api-abortcontroller-的区别" tabindex="-1"><strong>与 Fetch API AbortController 的区别</strong> <a class="header-anchor" href="#与-fetch-api-abortcontroller-的区别" aria-label="Permalink to &quot;**与 Fetch API AbortController 的区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>XMLHttpRequest.abort()</th><th>Fetch + AbortController</th></tr></thead><tbody><tr><td>中断粒度</td><td>整个 XHR 对象</td><td>单个 fetch 请求</td></tr><tr><td>错误类型</td><td>触发 onerror</td><td>抛出 AbortError 异常</td></tr><tr><td>并发控制</td><td>需手动管理实例</td><td>共享 AbortSignal 可批量终止</td></tr><tr><td>内存释放</td><td>需置 null 解除引用</td><td>Controller 断开即释放</td></tr></tbody></table><hr><h3 id="实际应用场景" tabindex="-1"><strong>实际应用场景</strong> <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;**实际应用场景**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请求超时自动终止</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timeoutId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Request timed out&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeoutId)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 处理数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><hr><h3 id="浏览器底层协作" tabindex="-1"><strong>浏览器底层协作</strong> <a class="header-anchor" href="#浏览器底层协作" aria-label="Permalink to &quot;**浏览器底层协作**&quot;">​</a></h3><ol><li><strong>渲染进程</strong>：执行 JavaScript 调用 <code>abort()</code></li><li><strong>网络服务</strong> (Chrome)：<code>network_service.mojom</code> 接口处理终止指令</li><li><strong>套接字管理器</strong>：标记 socket 为 <code>aborted</code> 状态</li><li><strong>磁盘缓存</strong>：中断可能存在的缓存写入操作</li><li><strong>垃圾回收</strong>：V8 引擎在下个 GC 周期回收相关对象</li></ol><blockquote><p>⚠️ 注意：部分浏览器（如 Firefox）在扩展程序中调用 <code>abort()</code> 可能需要额外权限才能操作网络层。</p></blockquote>`,13))])}const C=l(d,[["render",o]]);export{B as __pageData,C as default};
