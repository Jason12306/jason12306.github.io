import{_ as i,c as a,o as n,a2 as e}from"./chunks/framework.CnKoBJ9A.js";const c=JSON.parse('{"title":"关于 vue-router 的一些","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Vue/关于vue-router的一些.md","filePath":"articles/Vue/关于vue-router的一些.md"}'),t={name:"articles/Vue/关于vue-router的一些.md"};function l(p,s,h,r,k,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="关于-vue-router-的一些" tabindex="-1">关于 vue-router 的一些 <a class="header-anchor" href="#关于-vue-router-的一些" aria-label="Permalink to &quot;关于 vue-router 的一些&quot;">​</a></h1><p>使用<code>useRouter</code>和<code>useRoute</code>时，内部调用了 <code>vue</code> 的 <code>indejct</code> 方法进行注入（<code>src/useApi.ts</code>）</p><p>其提供是在 router 插件安装（install）时<code>app.provide</code>(<code>src/router.ts:1291</code>)</p><h2 id="routerlink" tabindex="-1">RouterLink <a class="header-anchor" href="#routerlink" aria-label="Permalink to &quot;RouterLink&quot;">​</a></h2><p>RouterLink 默认渲染为<code>&lt;a&gt;</code>标签，存在<code>custom</code>则渲染<code>children</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RouterLink.ts:310</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slots.default </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slots.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props.custom</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;aria-current&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: link.isExactActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props.ariaCurrentValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        href: link.href,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this would override user added attrs but Vue will still add</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // the listener, so we end up triggering both</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        onClick: link.navigate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        class: elClass.value,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      children</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><h2 id="routerview" tabindex="-1">RouterView <a class="header-anchor" href="#routerview" aria-label="Permalink to &quot;RouterView&quot;">​</a></h2><p>RouterView 为匹配到的组件渲染出口</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RouterView.ts:199</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // pass the vnode to the slot as a prop.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // h and &lt;component :is=&quot;...&quot;&gt; both accept vnodes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  normalizeSlot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(slots.default, { Component: component, route }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,9)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
