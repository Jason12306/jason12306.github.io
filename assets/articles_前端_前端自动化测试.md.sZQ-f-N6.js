import{_ as t,c as a,o as r,a2 as i}from"./chunks/framework.CnKoBJ9A.js";const s="/assets/test-pyramid.evZdr_zm.png",u=JSON.parse('{"title":"前端自动化测试","description":"","frontmatter":{},"headers":[],"relativePath":"articles/前端/前端自动化测试.md","filePath":"articles/前端/前端自动化测试.md"}'),n={name:"articles/前端/前端自动化测试.md"};function o(l,e,h,p,c,d){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="前端自动化测试" tabindex="-1">前端自动化测试 <a class="header-anchor" href="#前端自动化测试" aria-label="Permalink to &quot;前端自动化测试&quot;">​</a></h1><p><strong>自动化测试</strong>实际上是运行一段测试代码，去验证目标代码是否满足某个期望。是软件测试活动中一个重要的分支和组成部分，即利用工具或脚本达到测试目的，没有人工或者极少人工参与的软件测试活动称为自动化测试。</p><h2 id="有哪些测试类型" tabindex="-1">有哪些测试类型 <a class="header-anchor" href="#有哪些测试类型" aria-label="Permalink to &quot;有哪些测试类型&quot;">​</a></h2><ul><li>单元测试（Unit Test）</li><li>集成测试（Integration Test）</li><li>UI 测试（UI Test）</li><li>端对端测试（e2e Test）</li></ul><h3 id="单元测试-unit-test" tabindex="-1">单元测试（Unit Test） <a class="header-anchor" href="#单元测试-unit-test" aria-label="Permalink to &quot;单元测试（Unit Test）&quot;">​</a></h3><p>单元测试是最容易实现的：代码中多个组件共用的工具类库、多个组件共用的子组件等。 通常情况下，在公共函数/组件中一定要有单元测试来保证代码能够正常工作。单元测试也应该是项目中数量最多、覆盖率最高的。 能进行单元测试的函数/组件，一定是低耦合的，这也从一定程度上保证了我们的代码质量。</p><h3 id="集成测试-integration-test" tabindex="-1">集成测试（Integration Test） <a class="header-anchor" href="#集成测试-integration-test" aria-label="Permalink to &quot;集成测试（Integration Test）&quot;">​</a></h3><p>集成测试通常被应用在：耦合度较高的函数/组件、经过二次封装的函数/组件、多个函数/组件组合而成的函数/组件等。 集成测试的目的在于，测试经过单元测试后的各个模块组合在一起是否能正常工作。会对组合之后的代码整体暴露在外接口进行测试，查看组合后的代码工作是否符合预期。 集成测试是安全感较高的测试，能很大程度提升开发者的信心，集成测试用例设计合理且测试都通过能够很大程度保证产品符合预期。</p><h3 id="ui-测试-ui-test" tabindex="-1">UI 测试（UI Test） <a class="header-anchor" href="#ui-测试-ui-test" aria-label="Permalink to &quot;UI 测试（UI Test）&quot;">​</a></h3><p>在我学习查阅文献的过程中，我发现国内不少文章都将 UI 测试（UI Test）和端到端测试（E2E Test）混为一谈，认为是同一个测试类型。 事实上，UI 测试（UI Test）和端到端测试（E2E Test）是稍有区别的：</p><p>UI 测试（UI Test）只是对于前端的测试，是脱离真实后端环境的，仅仅只是将前端放在真实环境中运行，而后端和数据都应该使用 Mock 的。 端到端测试（E2E Test）则是将整个应用放到真实的环境中运行，包括数据在内也是需要使用真实的。</p><p>就前端而言，UI 测试（UI Test）更贴近于我们的开发流程。在前后端分离的开发模式中，前端开发通常会使用到 Mock 的服务器和数据。因而我们需要在开发基本完成后进行相应的 UI 测试（UI Test）。 UI 测试的自动化程度还不高，大多数还依赖于手工测试。 在一些自动化测试工具中有创建快照的功能，也能帮助我们在一定程度上实现 UI 测试（UI Test）的自动化。</p><h3 id="e2e-端对端测试" tabindex="-1">e2e 端对端测试 <a class="header-anchor" href="#e2e-端对端测试" aria-label="Permalink to &quot;e2e 端对端测试&quot;">​</a></h3><p>E2E 测试是在完成应用程序及其所有依赖项时进行验证的过程。</p><p>在 E2E 测试中，你创建一个与真实用户将使用的环境相同的环境。然后测试用户可能在你的应用程序上执行的所有操作。</p><p>通过端到端测试，你可以测试整个流程，比如登录网站或从在线商店购买产品。</p><p><img src="'+s+'" alt="pyramid test"></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844904194600599560" target="_blank" rel="noreferrer">试试前端自动化测试！（基础篇）</a></li><li><a href="https://apifox.com/apiskills/learn-automation-testing/" target="_blank" rel="noreferrer">前端自动化测试教程</a></li><li><a href="https://www.freecodecamp.org/chinese/news/end-to-end-testing-tutorial/" target="_blank" rel="noreferrer">什么是端对端测试？什么时候使用它？</a></li><li><a href="https://www.freecodecamp.org/chinese/news/how-to-write-unit-tests-and-e2e-tests-for-nestjs/" target="_blank" rel="noreferrer">如何为 Nestjs 编写单元测试和 E2E 测试</a></li></ul>',19)]))}const f=t(n,[["render",o]]);export{u as __pageData,f as default};
